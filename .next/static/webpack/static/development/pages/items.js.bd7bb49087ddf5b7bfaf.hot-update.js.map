{"version":3,"file":"static/webpack/static/development/pages/items.js.bd7bb49087ddf5b7bfaf.hot-update.js","sources":["webpack:///./components/Items.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport styled from 'styled-components';\nimport Item from './Item';\nimport Pagination from './Pagination';\nimport { perPage } from '../config';\n\nconst ALL_ITEMS_QUERY = gql`\n    query ALL_ITEMS_QUERY($skip: Int=0, $first: Int=${perPage}) {\n        items(first:$first, skip:$skip, orderBy: createdAt_DESC) {\n            id\n            title\n            price\n            description\n            image\n            largeImage\n        }\n    }\n`\n\nconst Center = styled.div`\n    text-align: center;\n`\n\nconst ItemsList = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 60px;\n    max-width: ${props => props.theme.maxWidth};\n    margin: 0 auto;\n`\n\nclass Items extends Component {\n    state = {  }\n    render() {\n        return (\n            <Center>\n                <Pagination page={this.props.page}/>\n                <Query \n                    query={ALL_ITEMS_QUERY} \n                    // fetchPolicy=\"network-only\"\n                    variables={{\n                        skip: this.props.page * perPage - perPage,\n                         first: perPage\n                    }}\n                    >\n                    { ({ data, error, loading }) => {\n                        if(loading) return <p>Loading...</p>\n                        if(error) return <p>Error: {error.message}</p>\n                        return <ItemsList>\n                            {data.items.map(item => <Item key={item.id} item={item}></Item>)}\n                        </ItemsList>\n                    }}\n                </Query>\n                <Pagination page={this.props.page}/>\n            </Center>\n\n        );\n    }\n}\n\nexport default Items;\nexport { ALL_ITEMS_QUERY };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AACA;AACA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA1BA;AACA;AA4BA;;;;;A","sourceRoot":""}